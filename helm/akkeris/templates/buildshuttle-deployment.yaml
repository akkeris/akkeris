apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "akkeris.buildshuttle.fullname" . }}
  labels:
{{ include "akkeris.buildshuttle.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.buildshuttle.replicaCount }}
  selector:
    matchLabels:
      {{- include "akkeris.buildshuttle.matchLabels" . | nindent 6 }}
  strategy:
{{ toYaml .Values.buildshuttle.strategy | indent 4 }}
  template:
    metadata:
    {{- if .Values.buildshuttle.podAnnotations }}
      annotations:
{{ toYaml .Values.buildshuttle.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        {{- include "akkeris.buildshuttle.labels" . | nindent 8 }}
    spec:
{{- if .Values.buildshuttle.schedulerName }}
      schedulerName: "{{ .Values.buildshuttle.schedulerName }}"
{{- end }}
      serviceAccountName: {{ template "akkeris.serviceAccountName.akkeris" . }}
{{- if .Values.buildshuttle.priorityClassName }}
      priorityClassName: "{{ .Values.buildshuttle.priorityClassName }}"
{{- end }}
      revisionHistoryLimit: 10
      containers:
        - name: {{ template "akkeris.name" . }}-{{ .Values.buildshuttle.name }}
          image: "{{ .Values.buildshuttle.image.repository }}:{{ .Values.buildshuttle.image.tag }}"
          imagePullPolicy: {{ .Values.buildshuttle.image.pullPolicy }}
          envFrom:
          - configMapRef:
              name: {{ .Values.buildshuttle.name }}
          {{- range .Values.buildshuttle.secrets }}
          - secretRef:
            name: {{ . }}
          {{- end }}
          env:
            {{- range $key, $value := .Values.buildshuttle.extraEnv }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
            - name: PORT
              value: 9000
            - name: DOCKER_BUILD_IMAGE
              value: "{{ .Values.buildshuttle.image.repository }}:{{ .Values.buildshuttle.image.tag }}"
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - mountPath: /var/run/docker.sock
            name: docker-socket
    {{- if .Values.imagePullSecrets }} 
      imagePullSecrets:
      {{ toYaml .Values.imagePullSecrets | indent 2 }}
    {{- end }}
    {{- if .Values.buildshuttle.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.buildshuttle.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.buildshuttle.securityContext }}
      securityContext:
{{ toYaml .Values.buildshuttle.securityContext | indent 8 }}
    {{- end }}
    {{- if .Values.buildshuttle.tolerations }}
      tolerations:
{{ toYaml .Values.buildshuttle.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.buildshuttle.affinity }}
      affinity:
{{ toYaml .Values.buildshuttle.affinity | indent 8 }}
    {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /var/run/docker.sock
          type: File
        name: docker-socket
      - emptyDir: {}
        name: dind-storage
